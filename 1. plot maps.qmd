---
title: "Untitled"
format: html
editor: visual
---

```{r message = F, warning = F}
library(readxl)
library(tidyverse)
library(sf)
```

```{r}
plots <- read_xlsx("Plot map template.xlsx", range = "M1:AP53") %>% 
  filter_all(all_vars(str_detect(.,"-|FILL")))

plots <- plots[1:5, 1:5]

plots_w <- plots %>%
  rowid_to_column("range") %>% 
  mutate(range = rev(range)) %>% 
  pivot_longer(cols= c(...1:ncol(.)), 
               names_to = "pass") %>% 
  mutate(pass = as.integer(str_replace(pass,"...", "")))
```

```{r}
# The field shape is needed to cut off lines within the shape of the field
field <- read_sf("boundary.shp")
# Create a line object in EPSG:4326
line <- st_transform(read_sf("linestring.shp"), crs = 3857)
line <- line$geometry
# Plot length
plot_length = 2*7.67/111320
# plot width
width <- 12*0.303
# Distance between field boundaries
nr_pass <- ncol(plots)
# Offset path
offset_path <- 0

# Run function to get each path
passes <- parallel_lines(line, width, field, offset_path, p = nr_pass, F)

```

```{r}
ranges <- nrow(plots)
# Sample a point in each line
plots_shapes<- 
passes %>% 
  mutate(plots_center = map(geometry, 
                            ~st_line_sample(.,
                                            n = ranges,
                                            type = "regular")
                            ),
         plots_center = map(plots_center, 
                            function(x){
                              st_crs(x) <- st_crs("+proj=longlat +datum=WGS84")
                              x
                            })
         )

plots_center <- sf::st_sfc(do.call(rbind, plots_shapes$plots_center), crs = sf::st_crs("+proj=longlat +datum=WGS84"))


plots_center <- st_transform(plots_center, 4326)

write_sf(plots_center, "plots_center2.shp")
```


Merge shape files and plot features

```{r}


test <- plots_center %>% st_cast("POINT") %>% 
  st_as_sf() %>% 
  cbind(range = rep(seq(1,ranges), nr_pass),
        pass = unlist(map(seq(1,nr_pass), ~rep(.,ranges)))
        )

st_crs(test) <- st_crs("+proj=longlat +datum=WGS84")
mapview::mapview(test)

as.data.frame(test$x) %>% 
  cbind(range = rep(seq(1,ranges), nr_pass),
        pass = unlist(map(seq(1,nr_pass), ~rep(.,ranges)))
        )




  
```

