---
title: "Untitled"
format: html
editor: visual
---

```{r message = F, warning = F}
library(readxl)
library(tidyverse)
library(sf)
library(lwgeom)
source("2.functions_maps.R")
```

```{r}
plots <- read_xlsx("../Plot map template.xlsx", range = "M1:AP53") %>% 
  filter_all(all_vars(str_detect(.,"-|FILL")))

plots <- plots[1:5, 1:5]

plots_w <- plots %>%
  rowid_to_column("range") %>% 
  mutate(range = rev(range)) %>% 
  pivot_longer(cols= c(...1:ncol(.)), 
               names_to = "pass") %>% 
  mutate(pass = as.integer(str_replace(pass,"...", "")))
```

```{r}
# The field shape is needed to cut off lines within the shape of the field
field <- read_sf("../shapes/boundary.shp")
# Create a line object in EPSG:4326
line <- st_transform(read_sf("../shapes/linestring.shp"), crs = 3857)
line <- line$geometry

# plot width
width <- 18*0.303
# Distance between field boundaries
nr_pass <- ncol(plots)
# Offset path
offset_path <- 0

# Run function to get each path
passes <- parallel_lines(line, width, field, offset_path, p = nr_pass, F)

```

```{r}
ranges <- nrow(plots)
# Sample a point in each line
plots_shapes<- 
passes %>% 
  mutate(plots_center = map(geometry, 
                            ~st_line_sample(.,
                                            n = ranges,
                                            type = "regular")
                            ),
         plots_center = map(plots_center, 
                            function(x){
                              st_crs(x) <- st_crs("+proj=longlat +datum=WGS84")
                              x
                            })
         )

plots_center <- sf::st_sfc(do.call(rbind, plots_shapes$plots_center), crs = sf::st_crs("+proj=longlat +datum=WGS84"))


plots_center <- st_transform(plots_center, 4326)

#write_sf(plots_center, "plots_center2.shp")
```

Merge shape files and plot features

```{r}

# Add range and pass
plots_shapefile <- plots_center %>% st_cast("POINT") %>% 
  st_as_sf() %>% 
  cbind(range = rep(seq(1,ranges), nr_pass),
        pass = unlist(map(seq(1,nr_pass), ~rep(.,ranges)))
        ) %>% 
  mutate_at(vars(pass, range), ~as.integer(.))

st_crs(plots_shapefile) <- st_crs("+proj=longlat +datum=WGS84")

# Merge
out <- full_join(plots_w, plots_shapefile) %>% 
   st_as_sf()

st_crs(out) <- st_crs("+proj=longlat +datum=WGS84") 


mapview::mapview(out)
```

```{r}
# Function for getting the plot length
plot_length <- out[c(1,31),]

pl <- 
out %>% 
  filter(range %in% c(1,2) & pass == 1)

```

Draw a polygon surrounding each point

```{r}
#' Function to create spatial polygons having the center of a plot and following an abline 
#'
#' This takes an a point which is the plot center and creates a polygon, which is the actual plot. 
#' @param sf_obj of class 'sf' 
#' @param abline of class 'sfc' which is the ab line of the field parallel to the passes
#' @param inter_plot_space of class 'numeric' which is a coefficient that that restricts the plots size so they do not overlap
#' @keywords Simple Features, sf
#' @export
#' @examples
#' \dontrun{
#'
#' }

create_polygons <- function(sf_obj, abline,inter_plot_space ){

# Center of the plot
plot_center <- sf_obj$x[[1]]

# Distance between two consecutive points within a single pass, equal to the plot length
plot_length <- sf_obj %>% 
  filter(range %in% c(1,2) & pass == 1)

cl <- sf::st_coordinates(line)[, 1:2]
angle <- calc_angle(cl[1, ], cl[nrow(cl), ]) + pi / 2




# half of the plot length
len2 <- calc_distance(plot_length, max = F)[1]/2 * inter_plot_space
# half of the plot width
w2 <- len2/2
# diagonal distance between plot center and corner of the plot
h <- sqrt(w2^2+len2^2)
# Heading angle of the line
attr(abline, "angle") <- angle


corner_points <- function()

# calculate the change in x and y coordinates
dy <- dist * cos(pi/4 + attr(abline, "angle") * pi/180)
dx <- dist * sin(pi/4 + attr(abline, "angle") * pi/180)

# create a new point object with the calculated coordinates
new_pt <- st_point(c(st_coordinates(plot_center)[1] + dx, 
                      st_coordinates(plot_center)[2] + dy))

# create a new point object with the calculated coordinates
new_pt1 <- st_point(c(st_coordinates(plot_center)[1] - dx, 
                      st_coordinates(plot_center)[2] + dy))
# create a new point object with the calculated coordinates
new_pt2 <- st_point(c(st_coordinates(plot_center)[1] - dx, 
                      st_coordinates(plot_center)[2] - dy))
# create a new point object with the calculated coordinates
new_pt3 <- st_point(c(st_coordinates(plot_center)[1] + dx, 
                      st_coordinates(plot_center)[2] - dy))

mp <- c(new_pt, new_pt1,new_pt2, new_pt3)

pg <- st_cast(mp, "POLYGON")

pg <- st_sfc(pg)

st_crs(pg) <- st_crs("+proj=longlat +datum=WGS84") 

return(pg)

}



mapview::mapView(pg)
```


```{r}
#' Function to create spatial polygons having the center of a plot and following an abline 
#'
#' This takes an a point which is the plot center and creates a polygon, which is the actual plot. 
#' @param sf_obj of class 'sf' 
#' @param abline of class 'sfc' which is the ab line of the field parallel to the passes
#' @param inter_plot_space of class 'numeric' which is a coefficient that that restricts the plots size so they do not overlap
#' @keywords Simple Features, sf
#' @export
#' @examples
#' \dontrun{
#'
#' }



sf_obj <- out
# Center of the plot
plot_center <- sf_obj$x[[1]]

# Distance between two consecutive points within a single pass, equal to the plot length
plot_length <- sf_obj %>% 
  filter(range %in% c(1,2) & pass == 1)


pol <- 
sf_obj %>% 
  rename(plot_center = x) %>% 
  mutate(plot_length = list(plot_length), 
         polygon = pmap(list(..1 = plot_center, ..2 = plot_length), 
                        ~st_sfc(corner_points(abline = line, plot_center = ..1,  plot_length = ..2, 1))
                        ), 
         #polygon = map(polygon, st_polygon) 
         ) %>% 
  as.data.frame() %>% 
  dplyr::select(-plot_length, -plot_center) %>% 
  rename(geometry = polygon)

polygons_w <- st_sfc(do.call(rbind, pol$geometry))

st_crs(polygons_w) <- st_crs("+proj=longlat +datum=WGS84")

pol$geometry <- polygons_w

pol <- st_as_sf(pol)

mapview::mapview(pol)
```


```{r}
corner_points <- function(abline,plot_center, plot_length, inter_plot_space ) {
  
cl <- sf::st_coordinates(abline)[, 1:2]
angle <- calc_angle(cl[1, ], cl[nrow(cl), ]) + pi / 2

# half of the plot length
len2 <- calc_distance(plot_length, max = F)[1]/2 * inter_plot_space
# half of the plot width
w2 <- len2/2
# diagonal distance between plot center and corner of the plot
h <- sqrt(w2^2+len2^2)
# Heading angle of the line
attr(abline, "angle") <- angle

# calculate the change in x and y coordinates
dy <- w2 * cos(pi/4 + attr(abline, "angle") * pi/180)
dx <- len2 * sin(pi/4 + attr(abline, "angle") * pi/180)

# create a new point object with the calculated coordinates
new_pt <- st_point(c(st_coordinates(plot_center)[1] + dx, 
                      st_coordinates(plot_center)[2] + dy))

# create a new point object with the calculated coordinates
new_pt1 <- st_point(c(st_coordinates(plot_center)[1] - dx, 
                      st_coordinates(plot_center)[2] + dy))
# create a new point object with the calculated coordinates
new_pt2 <- st_point(c(st_coordinates(plot_center)[1] - dx, 
                      st_coordinates(plot_center)[2] - dy))
# create a new point object with the calculated coordinates
new_pt3 <- st_point(c(st_coordinates(plot_center)[1] + dx, 
                      st_coordinates(plot_center)[2] - dy))

mp <- c(new_pt, new_pt1,new_pt2, new_pt3)

pg <- st_cast(mp, "POLYGON")

pg <- st_sfc(pg)

st_crs(pg) <- st_crs("+proj=longlat +datum=WGS84") 

return(pg)

}
```

```{r}
mapview::mapView(corner_points(line, plot_length, 0.98))

```


